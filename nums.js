var nums615 = [
  '6152129249', '6152199320', '6152199458', '6152199469', '6152199665', '6152407873', '6152407920', '6152407935', '6152407943', '6152410092', '6152199671', '6152199851', '6152199954', '6152396815', '6152407115', '6152407119', '6152407823', '6152407839', '6152407857', '6152407872', '6152410837', '6152410849', '6152410862', '6152410902', '6152410940', '6152410215', '6152410257', '6152410671', '6152410720', '6152410812', '6152416904', '6152416905', '6152416906', '6152416907', '6152416908', '6152416796', '6152416797', '6152416798', '6152416901', '6152416903', '6152410943', '6152412998', '6152416781', '6152416782', '6152416783', '6152416784', '6152416785', '6152416786', '6152416788', '6152416790', '6152416791', '6152416792', '6152416793', '6152416794', '6152416795', '6152708594', '6152708596', '6152708597', '6152708598', '6152708599', '6152708706', '6152708707', '6152708708', '6152708709', '6152708710', '6152708711', '6152708712', '6152708713', '6152708714', '6152708715', '6152708738', '6152708739', '6152708740', '6152708742', '6152708743', '6152708721', '6152708722', '6152708723', '6152708724', '6152708725', '6152708701', '6152708702', '6152708703', '6152708704', '6152708705', '6152708716', '6152708717', '6152708718', '6152708719', '6152708720', '6152416942', '6152416943', '6152416946', '6152416947', '6152416948', '6152708726', '6152708727', '6152708728', '6152708730', '6152708731', '6152416909', '6152416910', '6152416911', '6152416912', '6152416932', '6152416933', '6152416936', '6152416937', '6152416938', '6152416940', '6152416949', '6152416950', '6152416952', '6152416953', '6152416954', '6152498053', '6152498260', '6152498695', '6152498806', '6152498931', '6152664205', '6152666548', '6152666807', '6152673540', '6152673567', '6152702117', '6152705832', '6152708501', '6152708502', '6152708503', '6152416956', '6152416957', '6152416958', '6152475210', '6152498040', '6152673614', '6152673633', '6152673651', '6152673708', '6152673916', '6152708504', '6152708505', '6152708506', '6152708507', '6152708508', '6152708509', '6152708511', '6152708516', '6152708517', '6152708520', '6152708521', '6152708522', '6152708523', '6152708526', '6152708527', '6152708528', '6152708529', '6152708530', '6152708532', '6152708533', '6152708534', '6152708535', '6152708536', '6152708537', '6152708538', '6152708539', '6152708540', '6152708541', '6152708542', '6152708543', '6152708549', '6152708551', '6152708552', '6152708553', '6152708554', '6152708556', '6152708557', '6152708558', '6152708559', '6152708560', '6152708566', '6152708567', '6152708568', '6152708570', '6152708571', '6152708544', '6152708545', '6152708546', '6152708547', '6152708548', '6152708561', '6152708562', '6152708563', '6152708564', '6152708565', '6152708572', '6152708573', '6152708574', '6152708575', '6152708576', '6152708583', '6152708584', '6152708586', '6152708587', '6152708588', '6152708589', '6152708590', '6152708591', '6152708592', '6152708593', '6152708577', '6152708578', '6152708579', '6152708581', '6152708582', '6152708732', '6152708733', '6152708734', '6152708735', '6152708736', '6152708744', '6152708745', '6152708746', '6152708748', '6152708749', '6152708750', '6152709292', '6152709317', '6152709371', '6152709451', '6152709726', '6152709935', '6152709943', '6152709946', '6152709947', '6152709469', '6152709532', '6152709566', '6152709624', '6152709683', '6152858271', '6152858372', '6152858393', '6152858424', '6152858427', '6152749884', '6152800094', '6152800179', '6152800489', '6152800641', '6152749276', '6152749348', '6152749743', '6152749783', '6152749790', '6152858429', '6152858453', '6152859436', '6152859529', '6152859551', '6152958693', '6152958976', '6153070210', '6153070328', '6153070479', '6153071196', '6153071238', '6153071258', '6153071264', '6153071294', '6153076418', '6153076419', '6153076420', '6153076421', '6153076422', '6153076423', '6153076424', '6153076425', '6153076426', '6153076427', '6153071297', '6153071347', '6153071375', '6153071378', '6153071408', '6153076433', '6153076434', '6153076435', '6153076436', '6153076438', '6153076468', '6153076469', '6153076470', '6153076471', '6153076473', '6153076480', '6153076481', '6153076482', '6153076483', '6153076484', '6153076474', '6153076475', '6153076476', '6153076478', '6153076479', '6153076485', '6153076486', '6153076487', '6153076488', '6153076489', '6153488064', '6153488067', '6153488142', '6153488143', '6153488209', '6153754521', '6153754522', '6153754524', '6153754525', '6153754526', '6153265981', '6153265984', '6153265985', '6153265987', '6153265991', '6153076428', '6153076429', '6153076430', '6153076431', '6153076432', '6153076445', '6153076446', '6153076447', '6153076448', '6153076449', '6153076439', '6153076440', '6153076441', '6153076442', '6153076443', '6153754552', '6153754553', '6153754554', '6153754556', '6153754557', '6153754527', '6153754528', '6153754529', '6153754530', '6153754531', '6153754563', '6153754564', '6153754565', '6153754566', '6153754567', '6153754538', '6153754539', '6153754541', '6153754542', '6153754543', '6153076450', '6153076451', '6153076452', '6153076454', '6153076455', '6153076461', '6153076462', '6153076463', '6153076466', '6153076467', '6153076456', '6153076457', '6153076458', '6153076459', '6153076460', '6153070582', '6153070589', '6153070593', '6153071194', '6153071195', '6153071516', '6153071961', '6153076415', '6153076416', '6153076417', '6153071412', '6153071425', '6153071431', '6153071471', '6153071480', '6153076706', '6153265018', '6153265093', '6153265931', '6153265932', '6152800663', '6152819049', '6152819442', '6152819489', '6152819758', '6152859559', '6152859624', '6152859771', '6152958478', '6152958514', '6153754546', '6153754547', '6153754548', '6153754549', '6153754551', '6153076495', '6153076496', '6153076497', '6153076498', '6153076499', '6153076495', '6153076496', '6153076497', '6153076498', '6153076499', '6153076701', '6153076702', '6153076703', '6153076704', '6153076705', '6153487241', '6153487252', '6153487282', '6153487288', '6153487647', '6153076490', '6153076491', '6153076492', '6153076493', '6153076494', '6153269405', '6153269407', '6153269408', '6153269409', '6153269411', '6153269846', '6153269991', '6153340747', '6153340762', '6153485779', '6153487924', '6153487968', '6153487971', '6153487983', '6153488053', '6153265962', '6153265964', '6153265965', '6153265972', '6153265978', '6153754532', '6153754534', '6153754535', '6153754536', '6153754537', '6153487652', '6153487696', '6153487754', '6153487912', '6153487915', '6153485796', '6153485799', '6153487094', '6153487164', '6153487238', '6153488520', '6153488746', '6153588248', '6153588362', '6153588388', '6153588857', '6153588920', '6153754512', '6153754513', '6153754515', '6153754568', '6153754569', '6153754570', '6153754571', '6153754572', '6153754516', '6153754517', '6153754518', '6153754519', '6153754520', '6153754558', '6153754559', '6153754560', '6153754561', '6153754562', '6153588431', '6153588435', '6153588458', '6153588612', '6153588711'
];

var numz = ['2498695', '2666548', '2673567', '2673633', '2858372', '2858393', '2858424', '2858427', '2749884', '2749276', '2749348', '2749743', '2749783', '2858429', '2858453', '2859436', '2859529', '2958693', '2958976', '3754522', '3754524', '3754525', '3754526', '3265984', '3265985', '3265987', '3754552', '3754553', '3754554', '3754556', '3754557', '3754527', '3754528', '3754529', '3754563', '3754564', '3754565', '3754566', '3754567', '3754538', '3754539', '3754542', '3754543', '3265932', '2859559', '2859624', '2958478', '3754546', '3754547', '3754548', '3754549', '3487252', '3487282', '3487288', '3487647', '3269846', '3485779', '3487924', '3487968', '3487983', '3265962', '3265964', '3265965', '3265972', '3265978', '3754532', '3754534', '3754535', '3754536', '3754537', '3487652', '3487696', '3487754', '3485796', '3485799', '3487238', '3488746', '3588248', '3588362', '3588388', '3588857', '3754568', '3754569', '3754572', '3754558', '3754559', '3754562', '3588435', '3588458'];

// module.exports = nums615;

var trim615 = nums615.map(function(num) {
  var arr = num.split('');
  return arr.slice(3).join('');
});

function remove01 (arr) {
  var retArr = [];
  for (var i = 0; i < arr.length; i++) {
    if (arr[i].indexOf('0') === -1 && arr[i].indexOf('1') === -1) {
      retArr.push(arr[i]);
    }
  }
  return retArr;
}


function num2Alpha (numStr) { // this is not the function i meant to write.. it gets everything 23456789 can spell...
  var lets = [0, 1, 'abc', 'def', 'ghi', 'jkl', 'mno', 'pqrs', 'tuv', 'wxyz'];
  var alphaArr = [];
  var arr, str;

  for (var key2 = 0; key2 < 3; key2++) {
    arr = [];
    arr.push(lets[2][key2]);
    for (var key3 = 0; key3 < 3; key3++) {
      arr.push(lets[3][key3]);
      for (var key4 = 0; key4 < 3; key4++) {
        arr.push(lets[4][key4]);
        for (var key5 = 0; key5 < 3; key5++) {
          arr.push(lets[5][key5]);
          for (var key6 = 0; key6 < 3; key6++) {
            arr.push(lets[6][key6]);
            for (var key7 = 0; key7 < 4; key7++) {
              arr.push(lets[7][key7]);
              for (var key8 = 0; key8 < 3; key8++) {
                arr.push(lets[8][key8]);
                for (var key9 = 0; key9 < 4; key9++) {
                  arr.push(lets[9][key9]);

                  str = arr.join('');
                  alphaArr.push(str);

                }
              }
            }
          }
        }
      }
    }
  }
}


// input a phone number and get back an array of possible phoneletters
// for each number 2-9 there are either 3 or 4 letters it can be

// foreach option for first digit
  // push current option to array

  // foreach option for the second digit
    // push current option to array

    // ...

      // foreach option for the seventh digit
        // push current option to array


function num2Alpha (numStr) {
  var numArr = numStr.split('');
  var possibleChars = [];
  var possibleStrs = [];
  var permNum = 1;
  var arr = Array(numStr.length);

  for (var i = 0; i < numArr.length; i++) {
    if (numArr[i] === "0") {
      possibleChars.push("0");
    } else if (numArr[i] === "1") {
      possibleChars.push("1");
    } else if (numArr[i] === "2") {
      possibleChars.push("2abc");
    } else if (numArr[i] === "3") {
      possibleChars.push("3def");
    } else if (numArr[i] === "4") {
      possibleChars.push("4ghi");
    } else if (numArr[i] === "5") {
      possibleChars.push("5jkl");
    } else if (numArr[i] === "6") {
      possibleChars.push("6mno");
    } else if (numArr[i] === "7") {
      possibleChars.push("7pqrs");
    } else if (numArr[i] === "8") {
      possibleChars.push("8tuv");
    } else if (numArr[i] === "9") {
      possibleChars.push("9wxyz");
    }
  }

  for (var j = 0; j < possibleChars.length; j++) {
    permNum *= possibleChars[j].length;
  }

  console.log("possible combinations: " + permNum);
  console.log(possibleChars);

  for (var k = 0; k < possibleChars[0].length; k++) {
    arr[0] = (possibleChars[0][k]);
    for (var l = 0; l < possibleChars[1].length; l++) {
      arr[1] = (possibleChars[1][l]);
      for (var m = 0; m < possibleChars[2].length; m++) {
        arr[2] = (possibleChars[2][m]);

        if (possibleChars.length > 3) {
          for (var n = 0; n < possibleChars[3].length; n++) {
            arr[3] = (possibleChars[3][n]);

            if (possibleChars.length > 4) {
              for (var o = 0; o < possibleChars[4].length; o++) {
                arr[4] = (possibleChars[4][o]);
                for (var p = 0; p < possibleChars[5].length; p++) {
                  arr[5] = (possibleChars[5][p]);
                  for (var q = 0; q < possibleChars[6].length; q++) {
                    arr[6] = (possibleChars[6][q]);

                    if (possibleChars.length === 10) {
                      for (var r = 0; r < possibleChars[7].length; r++) {
                        arr[7] = (possibleChars[7][r]);
                        for (var s = 0; s < possibleChars[8].length; s++) {
                          arr[8] = (possibleChars[8][s]);
                          for (var t = 0; t < possibleChars[9].length; t++) {
                            arr[9] = (possibleChars[9][t]);
                            str = arr.join('');
                            possibleStrs.push(str);
                          }
                        }
                      }
                    } else {
                      str = arr.join('');
                      possibleStrs.push(str);
                    }

                  }
                }
              }
            } else {
              str = arr.join('');
              possibleStrs.push(str);
            }

          }
        } else {
          str = arr.join('');
          possibleStrs.push(str);
        }

      }
    }
  }

  return possibleStrs;

}
















